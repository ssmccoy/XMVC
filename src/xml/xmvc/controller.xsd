<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
      targetNamespace="http://www.blisted.org/ns/xmvc/"
      xmlns="http://www.blisted.org/ns/xmvc/">

  <xsd:annotation>
    <xsd:documentation>
      <!-- The DI configuration -->
      <context xmlns="http://www.blisted.org/ns/joice/">
        <script type="text/javascript" src="foo.js"/>
        <script type="text/javascript" src="bar.js"/>
        <script type="text/javascript" src="baz.js"/>

        <properties src="foo.properties"/>

        <object id="bar" class="Bar"/>

        <!-- XMVC Adds a "document" scope which keeps a relative chain of
        scopes attached to each element.  When the element is detached from
        the tree, the scope is detached.  This allows one to attach objects
        at a given level and assume that any updates to elements within that
        part of the DOM tree within the scope of the first reference are
        always acting on that object. -->
        <object id="foo" class="Foo" scope="document">
          <argument object="bar"/>
        </object>
      </context>

      <controller xmlns="http://www.blisted.org/ns/xmvc/">
        <!-- When someone clicks on a node with the id of foo -->
        <node id="foo">
          <action type="click" object="foo" handler="bar">
            <!-- Example non-standard locator and non-standard transformer.
            The transformer type "object" looks up an object in the joice
            context, and calls "transform" on it.  This example uses jquery for
            the locator.  The path becomes a jquery query. -->
            <transform locator="jquery" path="p.neat"
                       type="object" src="foo" behavior="append"/>

            <!-- add a new foo to the foo-list -->
            <transform path="//[@id=foo-list]" src="add-foo.xsl"
            behavior="append"/>
            <!-- Update the status box -->
            <transform path="//[@id=status]" src="update-status.xsl"
            behavior="replace">
              <param name="format" value="Added a new foo: {foo#name}"/>
            </transform>
          </action>
          <action type="load" object="foo" handler="bar">
            <!-- Example script transformer -->
            <transform type="script" path="//[@id=status]"
              object="transformer-object" handler="method"/>
          </action>
        </node>

        <node path="//foo">
          <action type="click" object="foo" handler="bar">
            <!-- add a new foo to the foo-list -->
            <transform path="//[@id=foo-list]" src="add-foo.xsl"
            behavior="append"/>
            <!-- Update the status box -->
            <transform path="//[@id=status]" src="update-status.xsl"
            behavior="replace">
              <param name="format" value="Added a new foo: {foo#name}"/>
            </transform>
          </action>
        </node>

        <node locator="jquery" path="div > p.foo">
          <action type="click" object="foo" handler="bar"/>
        </node>
      </controller>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:element name="controller" type="controller"/>
  <xsd:element name="node"       type="node"/>
  <xsd:element name="script"     type="script"/>

  <xsd:complexType name="controller">
    <xsd:sequence>
      <xsd:element name="script" type="script" minOccurs="0"
                   maxOccurs="unbounded"/>
      <!-- A joice context is required -->
      <xsd:element name="context" type="joice:context"/>
      <xsd:element name="node" type="node" 
      minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="script">
    <xsd:annotation>
      <xsd:documentation>
        A simple script element.  May contain actual javascript to be
        evaluated.  The contained javascript is expected to be in a CDATA block.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attribute use="required" name="type" type="xsd:string"/>
        <xsd:attribute use="required" name="src" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType name="node">
    <xsd:sequence>
      <xsd:element name="action" type="action" 
        minOccurs="1" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute use="optional" name="id" type="xsd:string"/>
    <xsd:attribute use="optional" name="class" type="xsd:string"/>
    <xsd:attribute use="optional" name="path" type="xsd:string"/>
  </xsd:complexType>

  <xsd:complexType name="action">
    <xsd:sequence>
      <xsd:element name="transform" type="transform"
        minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>

    <xsd:attribute use="required" name="type" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          The type of DOM event to act upon.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute use="required" name="handler" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          The handler function to execute.  Will either be a method of an
          object (given an object reference name for the object container) or
          the full name of a method referred to from the global scope.  Dot
          notation "name spaces" are resolved and traversed accordingly.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute use="optional" name="object" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          The context object for execution of the handler method.  This can
          either by a reference name for an object loaded from the provided
          container (Joice for instance) or null if the function name should be
          resolved within the global scope.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>

  <xsd:simpleType name="transform-behavior">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="append"/>
      <xsd:enumeration value="replace"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="script-transform">
    <xsd:annotation>
      <xsd:documentation>
        A transformer implemented by a javascript object loaded through Joice.
        This transformer makes no assertions about what type of objects are set
        in, but does expect a DOM object as a result.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:extension base="transform">
      <xsd:attribute use="required" name="object" type="xsd:string"/>
      <xsd:attribute use="required" name="handler" type="xsd:string"/>
    </xsd:extension>
  </xsd:complexType>

  <xsd:complexType name="transform">
    <xsd:sequence>
      <xsd:element name="param" type="transform-param"
        minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>

    <xsd:attribute use="optional" name="type" type="xsd:string"/>
    <xsd:attribute use="optional" name="populate" type="xsd:boolean"/>
    <xsd:attribute use="required" name="path" type="xsd:string"/>
    <xsd:attribute use="required" name="behavior" type="transform-behavior"/>
    <xsd:attribute use="required" name="src" type="xsd:anyURI"/>
  </xsd:complexType>

  <xsd:complexType name="param">
    <xsd:sequence/>
    <xsd:attribute name="name" value="xsd:string"/>
    <xsd:attribute name="value" value="xsd:string"/>
  </xsd:complexType>
</xsd:schema>
